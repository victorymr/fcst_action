# AUTOGENERATED! DO NOT EDIT! File to edit: index_st.ipynb.

# %% auto 0
__all__ = ['company_sel', 'col1', 'col2', 'city_res_df', 'city_locations', 'comp_row', 'out_story']

# %% index_st.ipynb 7
import streamlit as st
from streamlit_jupyter import StreamlitPatcher, tqdm
StreamlitPatcher().jupyter()  # register streamlit with jupyter-compatible wrappers

# %% index_st.ipynb 8
from datetime import datetime, timedelta
from matplotlib import pyplot as plt
import pandas as pd

# %% index_st.ipynb 9
st.title("Forecast Actions")

# %% index_st.ipynb 11
company_sel = st.selectbox('Select a company', company_list)

# %% index_st.ipynb 12
col1, col2 = st.columns(2)
with col1:
    lead_sel = st.selectbox('Forecast Lead',list(range(0,11)),index=False)
with col2:
    look_back_days = st.selectbox('Look back',list(range(0,90)))

# %% index_st.ipynb 14
city_res_df, city_locations = get_campaign_hist(company_df, campaigns_df, company_sel = company_sel, lead_days=lead_sel, recent_days=look_back_days)
comp_row = company_df[company_df['Company']==company_sel].iloc[-1,:]
out_story = print_campaign_story(comp_row)

# %% index_st.ipynb 15
for story in out_story:
    st.write(story)
st.dataframe(city_res_df.head(10))

# %% index_st.ipynb 17
st.pyplot(campaign_heatmap(city_res_df))

# %% index_st.ipynb 19
map_campaigns_by_day(city_res_df,city_locations)

# %% index_st.ipynb 21
if not look_back_days or look_back_days > 5:
    summary_stats = get_campaign_summary(city_res_df)
    st.write("Summary Stats")
    # Convert dictionary to DataFrame
    df = pd.DataFrame.from_dict({(i, j): summary_stats[i][j] 
                                for i in summary_stats.keys() 
                                for j in summary_stats[i].keys()}, orient='columns')

    # Format the Percentage column to display as percentage
    df['Percentage of total time per ad per city:'] = df['Percentage of total time per ad per city:'].map(lambda x: f"{x:.2f}%")

    # Round the Duration column to the nearest integer
    df['Duration per ad per city (in seconds)'] = df['Duration per ad per city (in seconds)'].round()

    # Transpose the DataFrame
    df = df.T
    display(df)
    st.table(df)
